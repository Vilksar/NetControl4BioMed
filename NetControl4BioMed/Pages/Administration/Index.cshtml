@page
@model IndexModel
@{
    ViewData["Title"] = "Overview";
}

<partial name="_NavigationQuickLinksPartial" model="@Helpers.ViewModels.NavigationQuickLinkViewModel.GetAdministrationNavigationQuickLinks(Model.View.UserCount, Model.View.RoleCount, Model.View.DatabaseCount, Model.View.NodeCollectionCount, Model.View.NodeCount, Model.View.EdgeCount)" />
<div class="card mb-3">
    <div class="card-header font-weight-bold">
        <div class="d-flex flex-column flex-lg-row-reverse justify-content-center align-items-center justify-content-lg-between">
            <div>
                <span><i class="fas fa-exclamation-circle"></i></span>
            </div>
            <div>
                <span>Issues</span>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model.View.DuplicateItemCount == 0)
        {
            <div class="alert alert-success text-justify text-wrap">
                <span><i class="fas fa-check-circle"></i></span>
                <span>There were no duplicate items found in the data.</span>
            </div>
        }
        else
        {
            @if (0 < Model.View.DuplicateDatabaseTypeCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.DuplicateDatabaseTypeCount != 1 ? "are" : "is") @Model.View.DuplicateDatabaseTypeCount duplicate database type value@(Model.View.DuplicateDatabaseTypeCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.DuplicateDatabaseCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.DuplicateDatabaseCount != 1 ? "are" : "is") @Model.View.DuplicateDatabaseCount duplicate database value@(Model.View.DuplicateDatabaseCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.DuplicateDatabaseNodeFieldCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.DuplicateDatabaseNodeFieldCount != 1 ? "are" : "is") @Model.View.DuplicateDatabaseNodeFieldCount duplicate database node field value@(Model.View.DuplicateDatabaseNodeFieldCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.DuplicateDatabaseEdgeFieldCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.DuplicateDatabaseEdgeFieldCount != 1 ? "are" : "is") @Model.View.DuplicateDatabaseEdgeFieldCount duplicate database edge field value@(Model.View.DuplicateDatabaseEdgeFieldCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.DuplicateDatabaseNodeFieldNodeCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.DuplicateDatabaseNodeFieldNodeCount != 1 ? "are" : "is") @Model.View.DuplicateDatabaseNodeFieldNodeCount duplicate database node field node value@(Model.View.DuplicateDatabaseNodeFieldNodeCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.DuplicateNodeCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.DuplicateNodeCount != 1 ? "are" : "is") @Model.View.DuplicateNodeCount duplicate node value@(Model.View.DuplicateNodeCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.DuplicateEdgeCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.DuplicateEdgeCount != 1 ? "are" : "is") @Model.View.DuplicateEdgeCount duplicate edge value@(Model.View.DuplicateEdgeCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.DuplicateNodeCollectionCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.DuplicateNodeCollectionCount != 1 ? "are" : "is") @Model.View.DuplicateNodeCollectionCount duplicate node collection value@(Model.View.DuplicateNodeCollectionCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
        }
        @if (Model.View.OrphanedItemCount == 0)
        {
            <div class="alert alert-success text-justify text-wrap">
                <span><i class="fas fa-check-circle"></i></span>
                <span>There were no orphaned items found in the data.</span>
            </div>
        }
        else
        {
            @if (0 < Model.View.OrphanedNodeCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.OrphanedNodeCount != 1 ? "are" : "is") @Model.View.OrphanedNodeCount orphaned node@(Model.View.OrphanedNodeCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.OrphanedEdgeCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.OrphanedEdgeCount != 1 ? "are" : "is") @Model.View.OrphanedEdgeCount orphaned edge@(Model.View.OrphanedEdgeCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.OrphanedNodeCollectionCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.OrphanedNodeCollectionCount != 1 ? "are" : "is") @Model.View.OrphanedNodeCollectionCount orphaned node collection@(Model.View.OrphanedNodeCollectionCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.OrphanedNetworkCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.OrphanedNetworkCount != 1 ? "are" : "is") @Model.View.OrphanedNetworkCount orphaned network@(Model.View.OrphanedNetworkCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.OrphanedAnalysisCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.OrphanedAnalysisCount != 1 ? "are" : "is") @Model.View.OrphanedAnalysisCount orphaned analys@(Model.View.OrphanedAnalysisCount != 1 ? "e" : "i").</span>
                </div>
            }
        }
        @if (Model.View.InconsistentItemCount == 0)
        {
            <div class="alert alert-success text-justify text-wrap">
                <span><i class="fas fa-check-circle"></i></span>
                <span>There were no inconsistent items found in the data.</span>
            </div>
        }
        else
        {
            @if (0 < Model.View.InconsistentNodeCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.InconsistentNodeCount != 1 ? "are" : "is") @Model.View.InconsistentNodeCount inconsistent node@(Model.View.InconsistentNodeCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.InconsistentEdgeCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.InconsistentEdgeCount != 1 ? "are" : "is") @Model.View.InconsistentEdgeCount inconsistent edge@(Model.View.InconsistentEdgeCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.InconsistentNodeCollectionCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.InconsistentNodeCollectionCount != 1 ? "are" : "is") @Model.View.InconsistentNodeCollectionCount inconsistent node collection@(Model.View.InconsistentNodeCollectionCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.InconsistentNetworkCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.InconsistentNetworkCount != 1 ? "are" : "is") @Model.View.InconsistentNetworkCount inconsistent network@(Model.View.InconsistentNetworkCount != 1 ? "s" : string.Empty).</span>
                </div>
            }
            @if (0 < Model.View.InconsistentAnalysisCount)
            {
                <div class="alert alert-warning text-justify text-wrap">
                    <span><i class="fas fa-exclamation-triangle"></i></span>
                    <span>There @(Model.View.InconsistentAnalysisCount != 1 ? "are" : "is") @Model.View.InconsistentAnalysisCount inconsistent analys@(Model.View.InconsistentAnalysisCount != 1 ? "e" : "i")s.</span>
                </div>
            }
        }
        <form method="post" asp-page-handler="UpdateItemCount" class="text-justify">
            <button type="submit" title="Update" class="btn btn-success btn-block">
                <span>Update</span>
            </button>
        </form>
    </div>
</div>
<div class="card mb-3">
    <div class="card-header font-weight-bold">
        <div class="d-flex flex-column flex-lg-row-reverse justify-content-center align-items-center justify-content-lg-between">
            <div>
                <span><i class="fas fa-fire"></i></span>
            </div>
            <div>
                <span>Hangfire</span>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="alert alert-info text-justify text-wrap">
            <span><i class="fas fa-info-circle"></i></span>
            <span>This application uses Hangfire to manage the background tasks. You can access the corresponding dashboard by clicking on the button below.</span>
        </div>
        <form method="post" asp-page-handler="Hangfire" class="text-justify">
            <button type="submit" title="Open Hangfire dashboard" class="btn btn-info btn-block">
                <span>Open Hangfire dashboard</span>
            </button>
        </form>
    </div>
</div>
<div class="card mb-3">
    <div class="card-header font-weight-bold">
        <div class="d-flex flex-column flex-lg-row-reverse justify-content-center align-items-center justify-content-lg-between">
            <div>
                <span><i class="fas fa-bullhorn"></i></span>
            </div>
            <div>
                <span>Announcements</span>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="alert alert-primary text-justify text-wrap">
            <span><i class="fas fa-info-circle"></i></span>
            <span>Write a message and click the button below to have it appear on each user's account overview page. This can be useful in making application-wide announcements. Submitting an empty message will clear the current announcement.</span>
        </div>
        <form method="post" asp-page-handler="UpdateAnnouncementMessage" class="text-justify">
            <div class="form-group">
                <label for="announcementMessage" class="font-weight-bold">Announcement message</label>
                <input id="announcementMessage" name="announcementMessage" value="@Model.View.AnnouncementMessage" class="form-control" />
                <span description-for="announcementMessage" class="text-muted small">The message of the announcement.</span>
                <span validation-for="announcementMessage" class="text-danger small"></span>
            </div>
            <button type="submit" title="Update" class="btn btn-primary btn-block">
                <span>Update</span>
            </button>
        </form>
    </div>
</div>
<div class="card mb-3">
    <div class="card-header font-weight-bold">
        <div class="d-flex flex-column flex-lg-row-reverse justify-content-center align-items-center justify-content-lg-between">
            <div>
                <span><i class="fas fa-sync"></i></span>
            </div>
            <div>
                <span>Recurring jobs</span>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="alert alert-warning text-justify text-wrap">
            <span><i class="fas fa-exclamation-triangle"></i></span>
            <span>You can (re)set all of the Hangfire recurrent jobs by clicking on the button below. The jobs are unset by default. The recurring jobs are:</span>
            <ul class="mt-1 mb-0">
                <li>
                    <span><span class="font-weight-bold">Recurring Cleaner</span>, which runs every day at midnight to stop ongoing long-running analyses, forcefully stop long-stopping analyses, and delete the networks and analyses created over a month before the current date.</span>
                </li>
            </ul>
        </div>
        <form method="post" asp-page-handler="ResetHangfireRecurrentJobs" class="text-justify">
            <button type="submit" title="Reset Hangfire recurrent jobs" class="btn btn-warning btn-block">
                <span class="text-white">Reset Hangfire recurrent jobs</span>
            </button>
        </form>
    </div>
</div>
<div class="card mb-3">
    <div class="card-header font-weight-bold">
        <div class="d-flex flex-column flex-lg-row-reverse justify-content-center align-items-center justify-content-lg-between">
            <div>
                <span><i class="fas fa-download"></i></span>
            </div>
            <div>
                <span>Download</span>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="alert alert-primary text-justify text-wrap">
            <span><i class="fas fa-info-circle"></i></span>
            <span>You can download all of the data used by the application (namely the database types, databases, database fields, nodes and edges) by clicking on the button below.</span>
        </div>
        <form method="post" asp-page-handler="Download" class="text-justify">
            <div class="form-group">
                <label for="type" class="font-weight-bold">Type</label>
                <select for="type" name="type" class="form-control">
                    <option value="All" title="All">All</option>
                    <option value="Duplicate" title="Duplicate">Duplicate</option>
                    <option value="Orphaned" title="Orphaned">Orphaned</option>
                    <option value="Inconsistent" title="Inconsistent">Inconsistent</option>
                </select>
                <span description-for="type" class="text-muted small">The type of the items to download.</span>
                <span validation-for="type" class="text-danger small"></span>
            </div>
            <div class="form-group">
                <label for="items" class="font-weight-bold">Items</label>
                <select for="items" name="items" class="form-control" multiple="multiple">
                    <option value="DatabaseTypes" title="Database types">Database types</option>
                    <option value="Databases" title="Databases">Databases</option>
                    <option value="DatabaseNodeFields" title="Database node fields">Database node fields</option>
                    <option value="DatabaseEdgeFields" title="Database edge fields">Database edge fields</option>
                    <option value="Nodes" title="Nodes">Nodes</option>
                    <option value="Edges" title="Edges">Edges</option>
                    <option value="NodeCollections" title="Node collections">Node collections</option>
                    <option value="Networks" title="Networks">Networks</option>
                    <option value="Analyses" title="Analyses">Analyses</option>
                </select>
                <span description-for="items" class="text-muted small">The items to download.</span>
                <span validation-for="items" class="text-danger small"></span>
            </div>
            <button type="submit" title="Download" class="btn btn-primary btn-block">
                <span>Download</span>
            </button>
        </form>
    </div>
</div>
<div class="card mb-3">
    <div class="card-header font-weight-bold">
        <div class="d-flex flex-column flex-lg-row-reverse justify-content-center align-items-center justify-content-lg-between">
            <div>
                <span><i class="fas fa-times"></i></span>
            </div>
            <div>
                <span>Delete</span>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="alert alert-danger text-justify text-wrap">
            <span><i class="fas fa-exclamation-circle"></i></span>
            <span>You can quickly delete all of the corresponding data by using the form below. <span class="font-weight-bold">This action can't be reversed, so continue only if you are sure!</span></span>
        </div>
        <form method="post" asp-page-handler="Delete" class="text-justify">
            <div class="form-group">
                <label for="items" class="font-weight-bold">Items</label>
                <select for="items" name="items" class="form-control">
                    <option value="" title="">Please select an option...</option>
                    <option value="Nodes" title="Nodes">Nodes</option>
                    <option value="Edges" title="Edges">Edges</option>
                    <option value="NodeCollections" title="Node collections">Node collections</option>
                    <option value="Networks" title="Networks">Networks</option>
                    <option value="Analyses" title="Analyses">Analyses</option>
                </select>
                <span description-for="items" class="text-muted small">The items to delete.</span>
                <span validation-for="items" class="text-danger small"></span>
            </div>
            <div class="form-group">
                <label for="confirmation" class="font-weight-bold">Confirmation</label>
                <input for="confirmation" name="confirmation" class="form-control" autocomplete="off" required="required" />
                <span description-for="confirmation" class="text-muted small">The confirmation for the deletion. You need to type "I confirm that I want to delete the <span class="">Items</span>!" (including the exclamation mark), replacing the word "items" with the case-sensitive name of the actual items that you would like to delete ("Nodes", "Edges", "NodeCollections", "Networks", or "Analyses").</span>
                <span validation-for="confirmation" class="text-danger small"></span>
            </div>
            <div class="form-group" hidden>
                <label for="reCaptchaToken" class="font-weight-bold">reCaptcha token</label>
                <input for="reCaptchaToken" name="reCaptchaToken" class="form-control recaptcha-input" />
                <span description-for="reCaptchaToken" class="text-muted small">The reCaptcha token corresponding to the current request.</span>
                <span validation-for="reCaptchaToken" class="text-danger small"></span>
            </div>
            <button type="submit" title="Delete" class="btn btn-danger btn-block">
                <span>Delete</span>
            </button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ScriptsValidationPartial" />
    <partial name="_ScriptsReCaptchaPartial" />
}
