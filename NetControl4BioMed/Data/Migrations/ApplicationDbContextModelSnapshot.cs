// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetControl4BioMed.Data;

namespace NetControl4BioMed.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Analysis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Algorithm")
                        .HasColumnType("int");

                    b.Property<int>("CurrentIteration")
                        .HasColumnType("int");

                    b.Property<int>("CurrentIterationWithoutImprovement")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTimeEnded")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateTimeIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisEdge", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EdgeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnalysisId", "EdgeId");

                    b.HasIndex("EdgeId");

                    b.ToTable("AnalysisEdges");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisNetwork", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnalysisId", "NetworkId");

                    b.HasIndex("NetworkId");

                    b.ToTable("AnalysisNetworks");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisNode", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AnalysisId", "NodeId", "Type");

                    b.HasIndex("NodeId");

                    b.ToTable("AnalysisNodes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisNodeCollection", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AnalysisId", "NodeCollectionId", "Type");

                    b.HasIndex("NodeCollectionId");

                    b.ToTable("AnalysisNodeCollections");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisUser", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnalysisId", "Email");

                    b.HasIndex("UserId");

                    b.ToTable("AnalysisUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ControlPath", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnalysisId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.ToTable("ControlPaths");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Database", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseTypeId");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseEdge", b =>
                {
                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EdgeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseId", "EdgeId");

                    b.HasIndex("EdgeId");

                    b.ToTable("DatabaseEdges");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseEdgeField", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseId");

                    b.ToTable("DatabaseEdgeFields");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseEdgeFieldEdge", b =>
                {
                    b.Property<string>("DatabaseEdgeFieldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EdgeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseEdgeFieldId", "EdgeId", "Value");

                    b.HasIndex("EdgeId");

                    b.ToTable("DatabaseEdgeFieldEdges");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseNode", b =>
                {
                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseId", "NodeId");

                    b.HasIndex("NodeId");

                    b.ToTable("DatabaseNodes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseNodeField", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSearchable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseId");

                    b.ToTable("DatabaseNodeFields");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseNodeFieldNode", b =>
                {
                    b.Property<string>("DatabaseNodeFieldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseNodeFieldId", "NodeId", "Value");

                    b.HasIndex("NodeId");

                    b.ToTable("DatabaseNodeFieldNodes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DatabaseTypes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseUser", b =>
                {
                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseId", "Email");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Edge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.EdgeNode", b =>
                {
                    b.Property<string>("EdgeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("EdgeId", "NodeId", "Type");

                    b.HasIndex("NodeId");

                    b.ToTable("EdgeNodes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Network", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Algorithm")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkDatabase", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NetworkId", "DatabaseId");

                    b.HasIndex("DatabaseId");

                    b.ToTable("NetworkDatabases");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkEdge", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EdgeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NetworkId", "EdgeId");

                    b.HasIndex("EdgeId");

                    b.ToTable("NetworkEdges");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkNode", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NetworkId", "NodeId", "Type");

                    b.HasIndex("NodeId");

                    b.ToTable("NetworkNodes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkNodeCollection", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NetworkId", "NodeCollectionId", "Type");

                    b.HasIndex("NodeCollectionId");

                    b.ToTable("NetworkNodeCollections");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkUser", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NetworkId", "Email");

                    b.HasIndex("UserId");

                    b.ToTable("NetworkUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Node", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NodeCollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NodeCollections");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NodeCollectionNode", b =>
                {
                    b.Property<string>("NodeCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NodeCollectionId", "NodeId");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeCollectionNodes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Path", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ControlPathId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ControlPathId");

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.PathEdge", b =>
                {
                    b.Property<string>("PathId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EdgeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PathId", "EdgeId");

                    b.HasIndex("EdgeId");

                    b.ToTable("PathEdges");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.PathNode", b =>
                {
                    b.Property<string>("PathId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PathId", "NodeId", "Type");

                    b.HasIndex("NodeId");

                    b.ToTable("PathNodes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisEdge", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisEdges")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Edge", "Edge")
                        .WithMany("AnalysisEdges")
                        .HasForeignKey("EdgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisNetwork", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisNetworks")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("AnalysisNetworks")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisNode", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisNodes")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Node", "Node")
                        .WithMany("AnalysisNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisNodeCollection", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisNodeCollections")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.NodeCollection", "NodeCollection")
                        .WithMany("AnalysisNodeCollections")
                        .HasForeignKey("NodeCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisUser", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisUsers")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.User", "User")
                        .WithMany("AnalysisUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ControlPath", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("ControlPaths")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Database", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.DatabaseType", "DatabaseType")
                        .WithMany("Databases")
                        .HasForeignKey("DatabaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseEdge", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseEdges")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Edge", "Edge")
                        .WithMany("DatabaseEdges")
                        .HasForeignKey("EdgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseEdgeField", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseEdgeFields")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseEdgeFieldEdge", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.DatabaseEdgeField", "DatabaseEdgeField")
                        .WithMany("DatabaseEdgeFieldEdges")
                        .HasForeignKey("DatabaseEdgeFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Edge", "Edge")
                        .WithMany("DatabaseEdgeFieldEdges")
                        .HasForeignKey("EdgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseNode", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseNodes")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Node", "Node")
                        .WithMany("DatabaseNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseNodeField", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseNodeFields")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseNodeFieldNode", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.DatabaseNodeField", "DatabaseNodeField")
                        .WithMany("DatabaseNodeFieldNodes")
                        .HasForeignKey("DatabaseNodeFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Node", "Node")
                        .WithMany("DatabaseNodeFieldNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseUser", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseUsers")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.User", "User")
                        .WithMany("DatabaseUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.EdgeNode", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Edge", "Edge")
                        .WithMany("EdgeNodes")
                        .HasForeignKey("EdgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Node", "Node")
                        .WithMany("EdgeNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkDatabase", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("NetworkDatabases")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkDatabases")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkEdge", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Edge", "Edge")
                        .WithMany("NetworkEdges")
                        .HasForeignKey("EdgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkEdges")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkNode", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkNodes")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Node", "Node")
                        .WithMany("NetworkNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkNodeCollection", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkNodeCollections")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.NodeCollection", "NodeCollection")
                        .WithMany("NetworkNodeCollections")
                        .HasForeignKey("NodeCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkUser", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkUsers")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.User", "User")
                        .WithMany("NetworkUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NodeCollectionNode", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.NodeCollection", "NodeCollection")
                        .WithMany("NodeCollectionNodes")
                        .HasForeignKey("NodeCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Node", "Node")
                        .WithMany("NodeCollectionNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Path", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.ControlPath", "ControlPath")
                        .WithMany("Paths")
                        .HasForeignKey("ControlPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.PathEdge", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Edge", "Edge")
                        .WithMany("PathEdges")
                        .HasForeignKey("EdgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Path", "Path")
                        .WithMany("PathEdges")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.PathNode", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Node", "Node")
                        .WithMany("PathNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Path", "Path")
                        .WithMany("PathNodes")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.UserRole", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
