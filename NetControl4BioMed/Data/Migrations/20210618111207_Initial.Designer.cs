// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetControl4BioMed.Data;

namespace NetControl4BioMed.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210618111207_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Analysis", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Algorithm")
                        .HasColumnType("int");

                    b.Property<int>("CurrentIteration")
                        .HasColumnType("int");

                    b.Property<int>("CurrentIterationWithoutImprovement")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeEnded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeToDelete")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDemonstration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumIterations")
                        .HasColumnType("int");

                    b.Property<int>("MaximumIterationsWithoutImprovement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisDatabase", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AnalysisId", "DatabaseId", "Type");

                    b.HasIndex("DatabaseId");

                    b.ToTable("AnalysisDatabases");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisInteraction", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnalysisId", "InteractionId");

                    b.HasIndex("InteractionId");

                    b.ToTable("AnalysisInteractions");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisProtein", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AnalysisId", "ProteinId", "Type");

                    b.HasIndex("ProteinId");

                    b.ToTable("AnalysisProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisProteinCollection", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AnalysisId", "ProteinCollectionId", "Type");

                    b.HasIndex("ProteinCollectionId");

                    b.ToTable("AnalysisProteinCollections");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisUser", b =>
                {
                    b.Property<string>("AnalysisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnalysisId", "Email", "Type");

                    b.HasIndex("UserId");

                    b.ToTable("AnalysisUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.BackgroundTask", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BackgroundTasks");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ControlPath", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnalysisId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.ToTable("ControlPaths");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Database", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseInteraction", b =>
                {
                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseId", "InteractionId");

                    b.HasIndex("InteractionId");

                    b.ToTable("DatabaseInteractions");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseInteractionField", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSearchable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseId");

                    b.ToTable("DatabaseInteractionFields");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseInteractionFieldInteraction", b =>
                {
                    b.Property<string>("DatabaseInteractionFieldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseInteractionFieldId", "InteractionId", "Value");

                    b.HasIndex("InteractionId");

                    b.ToTable("DatabaseInteractionFieldInteractions");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseProtein", b =>
                {
                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseId", "ProteinId");

                    b.HasIndex("ProteinId");

                    b.ToTable("DatabaseProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseProteinField", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSearchable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseId");

                    b.ToTable("DatabaseProteinFields");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseProteinFieldProtein", b =>
                {
                    b.Property<string>("DatabaseProteinFieldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseProteinFieldId", "ProteinId", "Value");

                    b.HasIndex("ProteinId");

                    b.ToTable("DatabaseProteinFieldProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseUser", b =>
                {
                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DatabaseId", "Email");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Interaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.InteractionProtein", b =>
                {
                    b.Property<string>("InteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("InteractionId", "ProteinId", "Type");

                    b.HasIndex("ProteinId");

                    b.ToTable("InteractionProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Network", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Algorithm")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeToDelete")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDemonstration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkDatabase", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatabaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NetworkId", "DatabaseId", "Type");

                    b.HasIndex("DatabaseId");

                    b.ToTable("NetworkDatabases");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkInteraction", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NetworkId", "InteractionId");

                    b.HasIndex("InteractionId");

                    b.ToTable("NetworkInteractions");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkProtein", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NetworkId", "ProteinId", "Type");

                    b.HasIndex("ProteinId");

                    b.ToTable("NetworkProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkProteinCollection", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NetworkId", "ProteinCollectionId", "Type");

                    b.HasIndex("ProteinCollectionId");

                    b.ToTable("NetworkProteinCollections");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkUser", b =>
                {
                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NetworkId", "Email", "Type");

                    b.HasIndex("UserId");

                    b.ToTable("NetworkUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Path", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ControlPathId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ControlPathId");

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.PathInteraction", b =>
                {
                    b.Property<string>("PathId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("PathId", "InteractionId", "Index");

                    b.HasIndex("InteractionId");

                    b.ToTable("PathInteractions");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.PathProtein", b =>
                {
                    b.Property<string>("PathId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("PathId", "ProteinId", "Type", "Index");

                    b.HasIndex("ProteinId");

                    b.ToTable("PathProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Protein", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ProteinCollection", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProteinCollections");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ProteinCollectionProtein", b =>
                {
                    b.Property<string>("ProteinCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProteinId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProteinCollectionId", "ProteinId");

                    b.HasIndex("ProteinId");

                    b.ToTable("ProteinCollectionProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ProteinCollectionType", b =>
                {
                    b.Property<string>("ProteinCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ProteinCollectionId", "Type");

                    b.ToTable("ProteinCollectionTypes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Analysis", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("Analyses")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisDatabase", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisDatabases")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("AnalysisDatabases")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Database");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisInteraction", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisInteractions")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Interaction", "Interaction")
                        .WithMany("AnalysisInteractions")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisProtein", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisProteins")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Protein", "Protein")
                        .WithMany("AnalysisProteins")
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Protein");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisProteinCollection", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisProteinCollections")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.ProteinCollection", "ProteinCollection")
                        .WithMany("AnalysisProteinCollections")
                        .HasForeignKey("ProteinCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("ProteinCollection");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.AnalysisUser", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("AnalysisUsers")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.User", "User")
                        .WithMany("AnalysisUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Analysis");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ControlPath", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Analysis", "Analysis")
                        .WithMany("ControlPaths")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseInteraction", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseInteractions")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Interaction", "Interaction")
                        .WithMany("DatabaseInteractions")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Database");

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseInteractionField", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseInteractionFields")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Database");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseInteractionFieldInteraction", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.DatabaseInteractionField", "DatabaseInteractionField")
                        .WithMany("DatabaseInteractionFieldInteractions")
                        .HasForeignKey("DatabaseInteractionFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Interaction", "Interaction")
                        .WithMany("DatabaseInteractionFieldInteractions")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseInteractionField");

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseProtein", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseProteins")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Protein", "Protein")
                        .WithMany("DatabaseProteins")
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Database");

                    b.Navigation("Protein");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseProteinField", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseProteinFields")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Database");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseProteinFieldProtein", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.DatabaseProteinField", "DatabaseProteinField")
                        .WithMany("DatabaseProteinFieldProteins")
                        .HasForeignKey("DatabaseProteinFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Protein", "Protein")
                        .WithMany("DatabaseProteinFieldProteins")
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseProteinField");

                    b.Navigation("Protein");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseUser", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("DatabaseUsers")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.User", "User")
                        .WithMany("DatabaseUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Database");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.InteractionProtein", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Interaction", "Interaction")
                        .WithMany("InteractionProteins")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Protein", "Protein")
                        .WithMany("InteractionProteins")
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interaction");

                    b.Navigation("Protein");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkDatabase", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Database", "Database")
                        .WithMany("NetworkDatabases")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkDatabases")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Database");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkInteraction", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Interaction", "Interaction")
                        .WithMany("NetworkInteractions")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkInteractions")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interaction");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkProtein", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkProteins")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Protein", "Protein")
                        .WithMany("NetworkProteins")
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("Protein");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkProteinCollection", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkProteinCollections")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.ProteinCollection", "ProteinCollection")
                        .WithMany("NetworkProteinCollections")
                        .HasForeignKey("ProteinCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("ProteinCollection");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.NetworkUser", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Network", "Network")
                        .WithMany("NetworkUsers")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.User", "User")
                        .WithMany("NetworkUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Network");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Path", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.ControlPath", "ControlPath")
                        .WithMany("Paths")
                        .HasForeignKey("ControlPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlPath");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.PathInteraction", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Interaction", "Interaction")
                        .WithMany("PathInteractions")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Path", "Path")
                        .WithMany("PathInteractions")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interaction");

                    b.Navigation("Path");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.PathProtein", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Path", "Path")
                        .WithMany("PathProteins")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Protein", "Protein")
                        .WithMany("PathProteins")
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");

                    b.Navigation("Protein");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ProteinCollectionProtein", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.ProteinCollection", "ProteinCollection")
                        .WithMany("ProteinCollectionProteins")
                        .HasForeignKey("ProteinCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.Protein", "Protein")
                        .WithMany("ProteinCollectionProteins")
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protein");

                    b.Navigation("ProteinCollection");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ProteinCollectionType", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.ProteinCollection", "ProteinCollection")
                        .WithMany("ProteinCollectionTypes")
                        .HasForeignKey("ProteinCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProteinCollection");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.UserRole", b =>
                {
                    b.HasOne("NetControl4BioMed.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetControl4BioMed.Data.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Analysis", b =>
                {
                    b.Navigation("AnalysisDatabases");

                    b.Navigation("AnalysisInteractions");

                    b.Navigation("AnalysisProteinCollections");

                    b.Navigation("AnalysisProteins");

                    b.Navigation("AnalysisUsers");

                    b.Navigation("ControlPaths");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ControlPath", b =>
                {
                    b.Navigation("Paths");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Database", b =>
                {
                    b.Navigation("AnalysisDatabases");

                    b.Navigation("DatabaseInteractionFields");

                    b.Navigation("DatabaseInteractions");

                    b.Navigation("DatabaseProteinFields");

                    b.Navigation("DatabaseProteins");

                    b.Navigation("DatabaseUsers");

                    b.Navigation("NetworkDatabases");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseInteractionField", b =>
                {
                    b.Navigation("DatabaseInteractionFieldInteractions");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.DatabaseProteinField", b =>
                {
                    b.Navigation("DatabaseProteinFieldProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Interaction", b =>
                {
                    b.Navigation("AnalysisInteractions");

                    b.Navigation("DatabaseInteractionFieldInteractions");

                    b.Navigation("DatabaseInteractions");

                    b.Navigation("InteractionProteins");

                    b.Navigation("NetworkInteractions");

                    b.Navigation("PathInteractions");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Network", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("NetworkDatabases");

                    b.Navigation("NetworkInteractions");

                    b.Navigation("NetworkProteinCollections");

                    b.Navigation("NetworkProteins");

                    b.Navigation("NetworkUsers");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Path", b =>
                {
                    b.Navigation("PathInteractions");

                    b.Navigation("PathProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Protein", b =>
                {
                    b.Navigation("AnalysisProteins");

                    b.Navigation("DatabaseProteinFieldProteins");

                    b.Navigation("DatabaseProteins");

                    b.Navigation("InteractionProteins");

                    b.Navigation("NetworkProteins");

                    b.Navigation("PathProteins");

                    b.Navigation("ProteinCollectionProteins");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.ProteinCollection", b =>
                {
                    b.Navigation("AnalysisProteinCollections");

                    b.Navigation("NetworkProteinCollections");

                    b.Navigation("ProteinCollectionProteins");

                    b.Navigation("ProteinCollectionTypes");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NetControl4BioMed.Data.Models.User", b =>
                {
                    b.Navigation("AnalysisUsers");

                    b.Navigation("DatabaseUsers");

                    b.Navigation("NetworkUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
